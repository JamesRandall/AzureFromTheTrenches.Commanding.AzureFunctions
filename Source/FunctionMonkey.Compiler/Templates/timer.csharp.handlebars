using System;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;

namespace {{Namespace}}
{
    public class {{Name}}
    {
        public {{Name}}(IServiceProvider serviceProvider)
        {
            FunctionMonkey.Runtime.FunctionServiceProvider.Value = serviceProvider;
        }

        [FunctionName("{{Name}}")]
        public async Task Run(
            [TimerTrigger("{{CronExpression}}")]TimerInfo myTimer,
            ILogger log,
            ExecutionContext executionContext
            {{{parameterOutputBinding}}}
        )
        {
            log.LogInformation("Timer trigger function {{Name}} processed a request.");
            FunctionMonkey.Runtime.FunctionProvidedLogger.Value = log;

            {{#if TimerCommandFactoryTypeName}}
            var commandFactory = (FunctionMonkey.Abstractions.ITimerCommandFactory<{{CommandTypeName}}>)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.ITimerCommandFactory<{{CommandTypeName}}>));
            {{CommandTypeName}} command = commandFactory.Create("{{CronExpression}}");
            {{else}}
            {{CommandTypeName}} command = new {{CommandTypeName}}();
            {{/if}}

            {{#if IsUsingValidator}}
            var validator = (FunctionMonkey.Abstractions.Validation.IValidator)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.Validation.IValidator));
            var validationResult = validator.Validate(command);
            if (!validationResult.IsValid)
            {
                throw new FunctionMonkey.Commanding.Abstractions.Validation.ValidationException("{{Name}}", validationResult);
            }
            {{/if}}

            var contextSetter = (FunctionMonkey.Abstractions.IContextSetter)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.IContextSetter));
            contextSetter.SetExecutionContext(executionContext.FunctionDirectory,
                executionContext.FunctionAppDirectory,
                executionContext.FunctionName,
                executionContext.InvocationId);

            {{#if OutputBinding}}
                {{#if NoCommandHandler}}
                    {{{CommandType}}} result = command;
                {{else}}
                    {{{CommandResultTypeName}}} result = (await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command)).Result;
                {{/if}}
                {{{collectorOutputBinding}}}
            {{else}}
                await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
            {{/if}}
            // The result will be useful when we want to include outputs too
        }
    }
}
