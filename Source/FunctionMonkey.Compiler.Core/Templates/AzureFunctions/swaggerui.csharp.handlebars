using System.Collections.Generic;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.StaticFiles;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;

namespace {{Namespace}}
{
    public static class OpenApiProvider
    {
        [FunctionName("OpenApiProvider")]
        public static IActionResult Run([HttpTrigger(AuthorizationLevel.Anonymous, "get", "post", Route = "{{OpenApiUserInterfaceRoute}}/{name1?}/{name2?}/{name3?}/{name4?}/{name5?}")]HttpRequest req, ILogger logger, string name1, string name2, string name3, string name4, string name5)
        {
            if (string.IsNullOrWhiteSpace(name1))
            {
                name1 = "index.html";
            }

            var resourceName = $"{{Namespace}}.openapi";
            if(!string.IsNullOrWhiteSpace(name1))
            {
                resourceName += "." + name1.ToLower();
            }
            if(!string.IsNullOrWhiteSpace(name2))
            {
                resourceName += "." + name2.ToLower();
            }
            if(!string.IsNullOrWhiteSpace(name3))
            {
                resourceName += "." + name3.ToLower();
            }
            if(!string.IsNullOrWhiteSpace(name4))
            {
                resourceName += "." + name4.ToLower();
            }
            if(!string.IsNullOrWhiteSpace(name5))
            {
                resourceName += "." + name5.ToLower();
            }
            Stream stream = typeof(OpenApiProvider).Assembly.GetManifestResourceStream(resourceName);
            if (stream != null)
            {
                var provider = new FileExtensionContentTypeProvider();
                if (!provider.TryGetContentType(Path.GetExtension(resourceName).ToLower(), out var contentType))
                {
                    contentType = "application/octet-stream";
                }
                return new FileStreamResult(stream, contentType);
            }
            else {
                logger.LogWarning($"Unable to find resource for {resourceName}");
            }
            return new NotFoundResult();
        }
    }
}
