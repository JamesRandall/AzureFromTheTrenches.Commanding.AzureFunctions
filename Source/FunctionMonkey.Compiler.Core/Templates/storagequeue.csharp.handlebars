using System;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Extensions.Logging;

namespace {{Namespace}}
{
    public class {{Name}}
    {
        public {{Name}}(IServiceProvider serviceProvider)
        {
            FunctionMonkey.Runtime.FunctionServiceProvider.Value = serviceProvider;
        }

        [FunctionName("{{Name}}")]
        public async Task Run(
            [QueueTrigger("{{QueueName}}", Connection = "{{ConnectionStringName}}")]string queueItem,
            DateTimeOffset expirationTime,
            DateTimeOffset insertionTime,
            DateTimeOffset nextVisibleTime,
            string queueTrigger,
            string id,
            string popReceipt,
            int dequeueCount,
            ILogger log,
            ExecutionContext executionContext
            {{{parameterOutputBinding}}}
        )
        {
            log.LogInformation("Storage queue trigger function {{Name}} processed a request.");
            FunctionMonkey.Runtime.FunctionProvidedLogger.Value = log;
            
            {{CommandTypeName}} command;
            if (!System.String.IsNullOrWhiteSpace(queueItem))
            {
                var serializer = (FunctionMonkey.Abstractions.ISerializer)
                    FunctionMonkey.Runtime.ServiceProvider.GetService(typeof({{CommandDeseriaizerTypeName}}));
                command = serializer.Deserialize<{{CommandTypeName}}>(queueItem, false); // we don't enforce security properties from message buses
            }
            else
            {
                command = new {{CommandTypeName}}();
            }

            var contextSetter = (FunctionMonkey.Abstractions.IContextSetter)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.IContextSetter));
            contextSetter.SetStorageQueueContext(expirationTime, insertionTime, nextVisibleTime, queueTrigger, id, popReceipt, dequeueCount);
            contextSetter.SetExecutionContext(executionContext.FunctionDirectory,
                executionContext.FunctionAppDirectory,
                executionContext.FunctionName,
                executionContext.InvocationId);

            {{#if IsUsingValidator}}
            var validator = (FunctionMonkey.Abstractions.Validation.IValidator)
                FunctionMonkey.Runtime.ServiceProvider.GetService(typeof(FunctionMonkey.Abstractions.Validation.IValidator));
            var validationResult = validator.Validate(command);
            if (!validationResult.IsValid)
            {
                throw new FunctionMonkey.Commanding.Abstractions.Validation.ValidationException("{{Name}}", validationResult, id);
            }
            {{/if}}
            
            {{#if OutputBinding}}
                {{#if NoCommandHandler}}
                    {{{CommandType}}} result = command;
                {{else}}
                    {{{CommandResultTypeName}}} result = (await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command)).Result;
                {{/if}}
                {{{collectorOutputBinding}}}
            {{else}} 
                await FunctionMonkey.Runtime.CommandDispatcher.DispatchAsync(command);
            {{/if}}
        }
    }
}
